{"version":3,"sources":["StreamlitAudioRecorder.tsx","index.tsx"],"names":["StAudioRec","mediaRecorder","audioChunks","state","isRecording","audioDataURL","render","className","onClick","toggleRecording","style","width","a","stopRecording","startRecording","options","mimeType","preferredType","navigator","mediaDevices","getUserMedia","audio","stream","MediaRecorder","isTypeSupported","addEventListener","event","push","data","audioBlob","Blob","type","URL","createObjectURL","setState","arrayBuffer","then","buffer","Streamlit","setComponentValue","arr","Uint8Array","start","console","error","stop","StreamlitComponentBase","withStreamlitConnection","setComponentReady","setFrameHeight","ReactDOM","StrictMode","document","getElementById"],"mappings":"wRA2BMA,E,4MACIC,cAAsC,K,EACtCC,YAAsB,G,EACvBC,MAAQ,CAAEC,aAAa,EAAOC,aAAc,I,EAE5CC,OAAS,WACd,IAAQF,EAAgB,EAAKD,MAArBC,YACR,OACA,8BACE,4BACEG,UAAS,iBAAYH,EAAc,YAAc,IACjDI,QAAS,EAAKC,gBACdC,MAAO,CAAEC,MAAO,QAEdP,EAAsB,SAAR,qBALlB,O,EAWIK,gB,sBAAkB,sBAAAG,EAAA,0DACA,EAAKT,MAArBC,YADgB,gBAGtB,EAAKS,gBAHiB,sCAKhB,EAAKC,iBALW,2C,EAUlBA,e,sBAAiB,gCAAAF,EAAA,sEAGfG,EAAU,CAAEC,SADZC,EAAgB,2BAFD,SAKAC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAL7C,OAKfC,EALe,OAMjBC,cAAcC,gBAAgBP,GAChC,EAAKhB,cAAgB,IAAIsB,cAAcD,EAAQP,GAE/C,EAAKd,cAAgB,IAAIsB,cAAcD,GAGzC,EAAKpB,YAAc,GAEnB,EAAKD,cAAcwB,iBAAiB,iBAAiB,SAACC,GACpD,EAAKxB,YAAYyB,KAAKD,EAAME,SAG9B,EAAK3B,cAAcwB,iBAAiB,QAAQ,WAC1C,IAAMI,EAAY,IAAIC,KAAK,EAAK5B,YAAa,CAAE6B,KAAMhB,EAAQC,WACvDX,EAAe2B,IAAIC,gBAAgBJ,GACzC,EAAKK,SAAS,CAAE7B,iBAEhBwB,EAAUM,cAAcC,MAAK,SAACC,GAC5BC,IAAUC,kBAAkB,CAC1BC,IAAK,IAAIC,WAAWJ,WAK1B,EAAKpC,cAAcyC,QACnB,EAAKR,SAAS,CAAE9B,aAAa,IA/BR,kDAiCrBuC,QAAQC,MAAM,4BAAd,MAjCqB,0D,EAqCjB/B,cAAgB,WAClB,EAAKZ,eAA8C,aAA7B,EAAKA,cAAcE,QAC3C,EAAKF,cAAc4C,OACnB,EAAKX,SAAS,CAAE9B,aAAa,M,yBAtEV0C,KA2EVC,cAAwB/C,GACvCsC,IAAUU,oBACVV,IAAUW,iBCpGVC,IAAS5C,OACP,kBAAC,IAAM6C,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.e6492d9e.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\n\ndeclare var MediaRecorder: any;\ndeclare var Blob: any;\n\ninterface MediaRecorder {\n  new (stream: MediaStream): MediaRecorder;\n  start(): void;\n  stop(): void;\n  state: 'inactive' | 'recording' | 'paused';\n  addEventListener(event: 'dataavailable' | 'stop', callback: (event: any) => void): void;\n}\n\ninterface Window {\n  MediaRecorder: typeof MediaRecorder;\n}\n\ninterface State {\n  isRecording: boolean;\n  audioDataURL: string;\n}\n\nclass StAudioRec extends StreamlitComponentBase<State> {\n  private mediaRecorder: MediaRecorder | null = null;\n  private audioChunks: Blob[] = [];\n  public state = { isRecording: false, audioDataURL: \"\" };\n\n  public render = (): ReactNode => {\n    const { isRecording } = this.state;\n    return (\n    <span>\n      <button\n        className={`button ${isRecording ? \"recording\" : \"\"}`}\n        onClick={this.toggleRecording}\n        style={{ width: \"99%\" }}\n      >\n        {!isRecording ? \"üéôÔ∏è\" : \"‚¨õ\"} {}\n      </button>\n    </span>\n    );\n  };\n\n  private toggleRecording = async () => {\n    const { isRecording } = this.state;\n    if (isRecording) {\n      this.stopRecording();\n    } else {\n      await this.startRecording();\n    }\n  };\n\n\n  private startRecording = async () => {\n    try {\n      const preferredType = 'audio/webm; codecs=opus';\n      const options = { mimeType: preferredType };\n\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      if (MediaRecorder.isTypeSupported(preferredType)) {\n        this.mediaRecorder = new MediaRecorder(stream, options);\n      } else {\n        this.mediaRecorder = new MediaRecorder(stream);\n      }\n\n      this.audioChunks = [];\n\n      this.mediaRecorder.addEventListener(\"dataavailable\", (event) => {\n        this.audioChunks.push(event.data);\n      });\n\n      this.mediaRecorder.addEventListener(\"stop\", () => {\n        const audioBlob = new Blob(this.audioChunks, { type: options.mimeType });\n        const audioDataURL = URL.createObjectURL(audioBlob);\n        this.setState({ audioDataURL });\n\n        audioBlob.arrayBuffer().then((buffer) => {\n          Streamlit.setComponentValue({\n            arr: new Uint8Array(buffer),\n          });\n        });\n      });\n\n      this.mediaRecorder.start();\n      this.setState({ isRecording: true });\n    } catch (error) {\n      console.error(\"Error starting recording:\", error);\n    }\n  };\n\n  private stopRecording = () => {\n    if (this.mediaRecorder && this.mediaRecorder.state !== \"inactive\") {\n      this.mediaRecorder.stop();\n      this.setState({ isRecording: false });\n    }\n  };\n}\n\nexport default withStreamlitConnection(StAudioRec);\nStreamlit.setComponentReady();\nStreamlit.setFrameHeight();\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StAudioRec from \"./StreamlitAudioRecorder\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StAudioRec />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}